let imgs = ["http://ia600503.us.archive.org/34/items/guest_202312/Windows%20Vista%20UserPictures/user.png", "https://raw.githubusercontent.com/TheOwlCoder/w96-apps/refs/heads/main/vista96/glass-texture.svg","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-close-active.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-close-hover.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-close-held.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-x.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-max-active.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-restore-active.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-max.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-restore.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-min-active.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-min-hover.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-max-hover.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-restore-hover.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-min-held.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-max-held.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-restore-held.png","https://rel2sp2.windows96.net/system/resource/themes/aero/windows/button-min.png","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/min-basic.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/min-basic-hover.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/min-basic-active.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/min-basic-inactive.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/max-basic.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/max-basic-active.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/max-basic-inactive.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/max-basic-hover.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/close-basic.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/close-basic-active.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/close-basic-inactive.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/close-basic-hover.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/max-basic-active.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/max-basic-hover.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/max-basic-inactive.svg","https://github.com/TheOwlCoder/w96-apps/raw/refs/heads/main/vista96/max-basic.svg"];
imgs.forEach((i) => {
  new Image().src = i;
});

let cancelStartClose = false;
const startMenuItems = [
    {
        name: "User",
        action: () => w96.sys.execCmd("explorer", ["c:/user"])
    },
    {
        name: "Documents",
        action: () => w96.sys.execCmd("explorer", ["c:/user/documents"])
    },
    {
        name: "App Data",
        action: () => w96.sys.execCmd("explorer", ["c:/user/appdata"])
    },
    {
        name: "Trash",
        action: () => w96.sys.execCmd("explorer", ["c:/trash"])
    },
    {
        type: "separator"
    },
    {
        name: "Computer",
        action: () => w96.sys.execCmd("explorer", [])
    },
    {
        name: "Root",
        action: () => w96.sys.execCmd("explorer", ["w:/"])
    },
    {
        type: "separator"
    },
    {
        name: "Run",
        action: () => w96.sys.execCmd("run", [])
    },
    {
        name: "Control Panel",
        action: () => w96.sys.execCmd("ctrl", [])
    },
    {
        name: "Help",
        action: () => w96.sys.execCmd("wiki96", [])
    },
    {
        name: '<button class="rebootbtn"><svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="19.00908" height="19.00908" viewBox="0,0,19.00908,19.00908"><g transform="translate(-230.49546,-170.49546)"><g fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10"><path d="M231.49546,180c0,-4.69693 3.80761,-8.50454 8.50454,-8.50454c4.69693,0 8.50454,3.80761 8.50454,8.50454c0,4.69693 -3.80761,8.50454 -8.50454,8.50454c-4.69693,0 -8.50454,-3.80761 -8.50454,-8.50454z" stroke-linecap="butt"/><path d="M240,177.66854v4.66293" stroke-linecap="round"/></g></g></svg><!--rotationCenter:9.5045415732626:9.5045415732626--></button>',
        action: () => w96.sys.execCmd("reboot", [])
    }
];

const quickProgramsMenuItems = [
    {
        name: "Explorer",
        icon: await w96.ui.Theme.getIconUrl("apps/explorer"),
        action: () => w96.sys.execCmd("explorer", [])
    },
    {
        name: "Package Manager",
        icon: await w96.ui.Theme.getIconUrl("apps/pkmgr"),
        action: () => w96.sys.execCmd("pkmgr", [])
    },
    {
        name: "Textpad",
        icon: await w96.ui.Theme.getIconUrl("apps/textpad"),
        action: () => w96.sys.execCmd("textpad", [])
    }
];

let currentView = "quick";

function createListItem(label, icon, action) {
    const btn = document.createElement('div');
    btn.classList.add('item');

    btn.addEventListener('click', (e) => {
        let evtObj = {
            evt: e
        };

        action(evtObj);
        window.setTimeout(() => {
            if (!cancelStartClose) {
                fnStartClose();
            }
            cancelStartClose = false;
        }, 100)

    });

    const iconEl = document.createElement('div');
    iconEl.className = "icon";
    iconEl.style.backgroundImage = `url(${icon})`;
    btn.appendChild(iconEl);

    const textEl = document.createElement('div');
    textEl.className = "text";
    textEl.innerText = label;
    btn.appendChild(textEl);

    return btn;
}

async function populateP1View(start, type, args) {
    currentView = type;
    const p1items = start.querySelector(".p1>.items");

    while (p1items.firstChild)
        p1items.removeChild(p1items.firstChild);

    //p1items.querySelectorAll("*").forEach((v)=>v.remove());

    if (type == "quick") {
        for (let i of quickProgramsMenuItems) {
            if (i.type == "separator") {
                const s = document.createElement('div');
                s.classList.add('separator');
                p1items.appendChild(s);
            } else {
                p1items.appendChild(createListItem(i.name, i.icon, i.action));
            }
        }
    } else if (type == "programs") {
        const diskContents = await w96.FS.readdir((args == null) ? "c:/system/programs" : args);
        const cleanNames = diskContents.map((v) => w96.FSUtil.fname(v));
        if (args && (args != "c:/system/programs") && (args !== "C:/system/programs")) {
            let upEl = createListItem("..", await w96.ui.Theme.getIconUrl("places/folder", "16x16"), async (e) => {
                cancelStartClose = true;
                populateP1View(start, "programs", w96.FSUtil.getParentPath(args));
                e.evt.stopPropagation();
            });

            upEl.classList.add('small');
            p1items.appendChild(upEl);
        }

        cleanNames.aForEach(async (n, i) => {
            let el = createListItem(n, await w96.ui.Theme.getFileIconUrl(diskContents[i], "16x16"), async (e) => {
                if (await w96.FS.isFile(diskContents[i])) {
                    w96.sys.execFile(diskContents[i]);
                } else {
                    e.evt.stopPropagation();
                    cancelStartClose = true;

                    // Open and close directory.
                    populateP1View(start, "programs", diskContents[i]);
                }
            });

            el.classList.add('small');
            p1items.appendChild(el);
        });
    }
}

let fnStartOpen = (e) => {
    // window.setTimeout(()=>{
    if (!document.getElementsByClassName("start-menu")[0]) {
        e = document.getElementsByClassName("shell36-start-menu")[0];
        try { e.remove() } catch (e) { };
        // Replace start menu
        const start = document.createElement('div');
        start.className = "start-menu oc-event-exempt";

        start.innerHTML = `
		<div class="bg-layer"></div>
		<div class="container">
			<div class="p1">
				<div class="items"></div>
				<div class="all-programs">
					<div class="button">
						▶ All Programs
					</div>
				</div>
				<div class="search-box">
					<input class="w96-textbox search" placeholder="Start Search">
				</div>
			</div>
			<div class="p2">
				<div class="account"></div>
				<div class="items"></div>
			</div>
		</div>
	`;

        // Setup search box
        const searchBox = start.querySelector('.search');
        const p1items = start.querySelector(".p1>.items");
        const allProgramsBtn = start.querySelector(".all-programs>.button");

        const prgmBackHandler = () => {
            populateP1View(start, "quick");
            allProgramsBtn.textContent = "▶ All Programs";
            searchBox.value = "";
            allProgramsBtn.onclick = prgmAllHandler;
        };

        const prgmAllHandler = async () => {
            await populateP1View(start, "programs");
            allProgramsBtn.onclick = prgmBackHandler;
            allProgramsBtn.textContent = "◀ Back";
            searchBox.value = "";
        };

        allProgramsBtn.onclick = prgmAllHandler;

        searchBox.addEventListener('keydown', async (v) => {
            try {
                if ((searchBox.value.trim() == "") && (currentView !== "quick")) {
                    // Revert to quick view
                    populateP1View(start, "quick");
                    allProgramsBtn.textContent = "▶ All Programs";

                    // All programs event handler.
                    allProgramsBtn.onclick = prgmAllHandler;
                } else {
                    if (searchBox.value.length < 2) {
                        return;
                    } else {

                        allProgramsBtn.textContent = "◀ Back";
                        allProgramsBtn.onclick = prgmBackHandler;
                        // TODO Add events to programs button to go back.

                        // Show search results
                        populateP1View(start, "search");

                        let diskContents = await w96.FS.walk("C:/user");
                        diskContents = diskContents.concat(await w96.FS.walk("C:/system/programs"));
                        // const cleanNames = diskContents.map((v) => w96.FSUtil.fname(v));

                        // const lq = searchBox.value.trim().toLowerCase();

                        // alert(diskContents);
                        // alert(await cleanNames);

                        let cleanNames = diskContents.filter(function (value) {
                            return value.toLowerCase().indexOf(searchBox.value.toLowerCase()) >= 0;
                        });
                        // cleanNames = filteredData;

                        let firstIndex = 0;

                        cleanNames.forEach((n, i) => {
                            // const nLq = n.trim().toLowerCase();

                            // if (nLq.includes(lq)) {

                            // }
                            let icon = w96.ui.Theme.getFileIconUrl(cleanNames[i], "small");
                            let el = createListItem(n.split("/")[n.split("/").length - 1], icon, () => {
                                w96.sys.execFile(cleanNames[i]);
                            });
                            if (!firstIndex) firstIndex = i;

                            el.classList.add('small');
                            el.addEventListener("contextmenu", () => {
                                w96.sys.execCmd("explorer", [cleanNames[i]]);
                                fnStartClose();
                            })

                            p1items.appendChild(el);
                        });

                        if (v.keyCode == 13) {
                            fnStartClose();
                            w96.sys.execFile(cleanNames[0]);
                        }
                    }
                }
            } catch (e) {
                console.error(e);
            }
        });

        populateP1View(start, "quick");

        const p2items = start.querySelector(".p2>.items");

        for (let i of startMenuItems) {
            if (i.type == "separator") {
                const s = document.createElement('div');
                s.classList.add('separator');
                p2items.appendChild(s);
            } else {
                const btn = document.createElement('button');
                btn.addEventListener('click', () => {
                    fnStartClose();
                    i.action();
                });
                btn.innerHTML = i.name;
                p2items.appendChild(btn);
            }
        }

        document.body.appendChild(start);
        searchBox.focus();
        // }, 100)
    } else {
        fnStartClose();
        e = document.getElementsByClassName("shell36-start-menu")[0];
        try { e.remove() } catch (e) { };
    }
};

const st = window.setInterval(function () {
    if (document.querySelector(".start_button")) {
        clearInterval(st);
        document.querySelector(".start_button").addEventListener("click", function () {
            fnStartOpen()
        });
    }
}, 100)

let fnStartClose = () => {
    const s = document.querySelector('.start-menu');

    if (s) {
        while (s.firstChild)
            s.removeChild(s.firstChild);

        s.remove();
    }
};

w96.evt.ui.on('start-close', fnStartClose);
